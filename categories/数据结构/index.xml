<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>数据结构 on Yang Blog</title>
    <link>https://blog.jiyang.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on Yang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Thu, 24 Oct 2019 22:41:02 +0000</lastBuildDate>
    
        <atom:link href="https://blog.jiyang.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>小根堆-大根堆</title>
        <link>https://blog.jiyang.site/posts/2019-10-24-%E5%B0%8F%E6%A0%B9%E5%A0%86/</link>
        <pubDate>Thu, 24 Oct 2019 22:41:02 +0000</pubDate>
        
        <atom:modified>Thu, 24 Oct 2019 22:41:02 +0000</atom:modified>
        <guid>https://blog.jiyang.site/posts/2019-10-24-%E5%B0%8F%E6%A0%B9%E5%A0%86/</guid>
        <description>&lt;p&gt;理解堆的定义, 使用堆实现一个优先级队列, 查看 &lt;code&gt;java.util.Timer&lt;/code&gt; 中的小根堆实现&lt;/p&gt;</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>树</category>
            
          
            
              <category>堆</category>
            
          
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      
      <item>
        <title>二叉树-B&#43;树-AVL树-红黑树-哈夫曼树</title>
        <link>https://blog.jiyang.site/posts/2018-04-07-%E4%BA%8C%E5%8F%89%E6%A0%91-b&#43;%E6%A0%91-avl%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2018-04-07-%E4%BA%8C%E5%8F%89%E6%A0%91-b&#43;%E6%A0%91-avl%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</guid>
        <description>二叉树： AVL树(自平衡二叉树) 红黑树 哈夫曼树(最优二叉树) B树不是二叉树 二叉树 二叉树的第 $i$ 层至多拥有 $ 2^{i-1} $ 个节点数； 深度为 $k$ 的二叉树至多总</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>二叉树</category>
            
          
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      
      <item>
        <title>二叉树集锦</title>
        <link>https://blog.jiyang.site/posts/2017-08-15-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9B%86%E9%94%A6/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-08-15-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%9B%86%E9%94%A6/</guid>
        <description>二叉树节点： 1 2 3 4 5 6 7 8 9 class BinaryTreeNode { int val; BinaryTreeNode left; BinaryTreeNode right; public BinaryTreeNode(int val) { this.val = val; } } 访问节点操作 1 2 3 void visit(BinaryTreeNode node) { System.out.print(node.val + &amp;#34; &amp;#34;); } 二叉树节点数目 如果是空树：返回0 如果不</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      
      <item>
        <title>动态数组C&#43;&#43;实现</title>
        <link>https://blog.jiyang.site/posts/2017-05-31-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84c&#43;&#43;%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-05-31-%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84c&#43;&#43;%E5%AE%9E%E7%8E%B0/</guid>
        <description>回顾大二的数据结构知识。从数组开始。实现了一个可自动扩充容量的泛型数组。 头文件:Array.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>数组</category>
            
          
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      
      <item>
        <title>双向链表C&#43;&#43;实现</title>
        <link>https://blog.jiyang.site/posts/2017-05-31-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c&#43;&#43;%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-05-31-%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8c&#43;&#43;%E5%AE%9E%E7%8E%B0/</guid>
        <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 #ifndef LinkList_hpp #define LinkList_hpp typedef struct Node{ int data; Node* next; Node* pre; }Node; class LinkList{ private: Node *head; Node *tail; int length; public: LinkList(); //分配内存，构建节点 Node* makeNode(); /</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>链表</category>
            
          
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      
      <item>
        <title>链表问题</title>
        <link>https://blog.jiyang.site/posts/2017-08-12-%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-08-12-%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98/</guid>
        <description>链表逆序 从尾到头打印节点 2018-04-16更新: 递归逆序链表 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class LinkNode(object): def __init__(self, val, next=None): self.val = val self.next = next def</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>链表</category>
            
          
        
        
          
            
              <category>数据结构</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>