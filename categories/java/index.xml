<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Java on Yang Blog</title>
    <link>https://blog.jiyang.site/categories/java/</link>
    <description>Recent content in Java on Yang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 20 Jan 2020 17:59:51 +0000</lastBuildDate>
    
        <atom:link href="https://blog.jiyang.site/categories/java/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>使用Java解析class字节码结构</title>
        <link>https://blog.jiyang.site/posts/2020-01-20-%E4%BD%BF%E7%94%A8java%E8%A7%A3%E6%9E%90class%E5%AD%97%E8%8A%82%E7%A0%81%E7%BB%93%E6%9E%84/</link>
        <pubDate>Mon, 20 Jan 2020 17:59:51 +0000</pubDate>
        
        <atom:modified>Mon, 20 Jan 2020 17:59:51 +0000</atom:modified>
        <guid>https://blog.jiyang.site/posts/2020-01-20-%E4%BD%BF%E7%94%A8java%E8%A7%A3%E6%9E%90class%E5%AD%97%E8%8A%82%E7%A0%81%E7%BB%93%E6%9E%84/</guid>
        <description>按照JVM 字节码的存储格式 https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html 规范，实现了一段程序解析字节码结构。 结果输出 ========== Start Parse========= == Magic Number ====================================== MagicNumber{b1=CA, b2=FE, b3=BA, b4=BE} == Version ====================================== Version{minorVersion=0, majorVersion=52} == Constant Pool ====================================== ConstantPool{poolCount=214, constantsSize=2376, mConstantItems= #1 MethodRef{classInfoIndex=65, nameAndTypeIndex=130} #2 String{index=131} ... #213 Utf8{attributeLength=20, value=&#39;()Ljava/lang/String;&#39;} } ==</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>RxJava&#39;s Thread Dispatch</title>
        <link>https://blog.jiyang.site/posts/2018-08-13-rxjava-thread-dispatch/</link>
        <pubDate>Fri, 17 Aug 2018 21:24:42 +0000</pubDate>
        
        <atom:modified>Fri, 17 Aug 2018 21:24:42 +0000</atom:modified>
        <guid>https://blog.jiyang.site/posts/2018-08-13-rxjava-thread-dispatch/</guid>
        <description>简单的使用 RxJava，并结合线程切换: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Observable.create(new ObservableOnSubscribe&amp;lt;Object&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Object&amp;gt; emitter) { Log.d(&amp;#34;TAG&amp;#34;, &amp;#34;[subscribe]&amp;#34; + Thread.currentThread().getName()); emitter.onNext(1); emitter.onNext(2); emitter.onNext(3); emitter.onComplete(); } }).subscribeOn(Schedulers.io()) .observeOn(AndroidScheduler.mainThread()) .subscribe(new Observer&amp;lt;Object&amp;gt;() {</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>Rx</category>
            
          
        
        
          
            
              <category>Android</category>
            
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>RxJava Observer Observable(Not With Thread Dispatch) Source Code</title>
        <link>https://blog.jiyang.site/posts/2018-08-10-rxjava-observer-observable/</link>
        <pubDate>Fri, 10 Aug 2018 23:20:50 +0000</pubDate>
        
        <atom:modified>Fri, 10 Aug 2018 23:20:50 +0000</atom:modified>
        <guid>https://blog.jiyang.site/posts/2018-08-10-rxjava-observer-observable/</guid>
        <description>众所周知 RxJava 是基于观察者模式的响应式编程框架。其中主要有2个主要对象： Observable 被观察者 Observer 观察者 不带线程切换的基本用法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>Rx</category>
            
          
        
        
          
            
              <category>Android</category>
            
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>BlockingQueue-CountDownLatch</title>
        <link>https://blog.jiyang.site/posts/2017-07-25-blockingqueue-countdownlatch/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-07-25-blockingqueue-countdownlatch/</guid>
        <description>BlockingQueue:Java提供的线程安全的队列接口。 CountDownWatch:可用来让一个线程一直等待watch的值为0,另一</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Java 单例实现</title>
        <link>https://blog.jiyang.site/posts/2017-08-19-%E5%8D%95%E4%BE%8B%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-08-19-%E5%8D%95%E4%BE%8B%E5%88%86%E6%9E%90/</guid>
        <description>单例常见实现方式 饿汉式：在类被加载时就初始化单例 懒汉式：在需要的地方才初始化单例 饿汉式加载问题 传统的在类加载时就创建单例的方法存在一些问题：</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>ThreadLocal理解</title>
        <link>https://blog.jiyang.site/posts/2017-08-02-threadlocal%E7%90%86%E8%A7%A3/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-08-02-threadlocal%E7%90%86%E8%A7%A3/</guid>
        <description>不同的线程可以通过同一个 ThreadLocal 对象获取只属于自己的数据。 ThreadLocal.ThreadLocalMap ThreadLocal的内部类。是以ThreadLocal的 hash 值为数组下标，Entry</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
            
              <category>Android</category>
            
          
        
        
      </item>
      
      <item>
        <title>transient关键字</title>
        <link>https://blog.jiyang.site/posts/2017-07-30-transient%E5%85%B3%E9%94%AE%E5%AD%97/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-07-30-transient%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
        <description>transient 关键字 transient关键字声明的成员变量，在序列化时会被忽略。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>线程池ThreadExexutor原理与使用</title>
        <link>https://blog.jiyang.site/posts/2017-08-13-%E7%BA%BF%E7%A8%8B%E6%B1%A0threadexexutor%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        
        <guid>https://blog.jiyang.site/posts/2017-08-13-%E7%BA%BF%E7%A8%8B%E6%B1%A0threadexexutor%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
        <description>ThreadPoolExecutor组成 ThreadPoolExecutor的核心构造函数: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public ThreadPoolExecutor(int corePoolSize,</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
        
          
            
              <category>Java</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>