<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Rx on Yang Blog</title>
    <link>https://jiyang.site/tags/rx/</link>
    <description>Recent content in Rx on Yang Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>©2023, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 17 Aug 2018 21:24:42 +0000</lastBuildDate>
    
        <atom:link href="https://jiyang.site/tags/rx/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>RxJava&#39;s Thread Dispatch</title>
        <link>https://jiyang.site/posts/2018-08-13-rxjava-thread-dispatch/</link>
        <pubDate>Fri, 17 Aug 2018 21:24:42 +0000</pubDate>
        
        <atom:modified>Fri, 17 Aug 2018 21:24:42 +0000</atom:modified>
        <guid>https://jiyang.site/posts/2018-08-13-rxjava-thread-dispatch/</guid>
        <description>简单的使用 RxJava，并结合线程切换: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Observable.create(new ObservableOnSubscribe&amp;lt;Object&amp;gt;() { @Override public void subscribe(ObservableEmitter&amp;lt;Object&amp;gt; emitter) { Log.d(&amp;#34;TAG&amp;#34;, &amp;#34;[subscribe]&amp;#34; + Thread.currentThread().getName()); emitter.onNext(1); emitter.onNext(2); emitter.onNext(3); emitter.onComplete(); } }).subscribeOn(Schedulers.io()) .observeOn(AndroidScheduler.mainThread()) .subscribe(new Observer&amp;lt;Object&amp;gt;() {</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>Rx</category>
            
          
        
        
          
            
              <category>Android</category>
            
          
            
              <category>Java</category>
            
          
        
        
      </item>
      
      <item>
        <title>RxJava Observer Observable(Not With Thread Dispatch) Source Code</title>
        <link>https://jiyang.site/posts/2018-08-10-rxjava-observer-observable/</link>
        <pubDate>Fri, 10 Aug 2018 23:20:50 +0000</pubDate>
        
        <atom:modified>Fri, 10 Aug 2018 23:20:50 +0000</atom:modified>
        <guid>https://jiyang.site/posts/2018-08-10-rxjava-observer-observable/</guid>
        <description>众所周知 RxJava 是基于观察者模式的响应式编程框架。其中主要有2个主要对象： Observable 被观察者 Observer 观察者 不带线程切换的基本用法： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15</description>
        
        <dc:creator>Yang</dc:creator>
        
        
        
        
          
            
              <category>Rx</category>
            
          
        
        
          
            
              <category>Android</category>
            
          
            
              <category>Java</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
